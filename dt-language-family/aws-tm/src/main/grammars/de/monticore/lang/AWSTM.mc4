package de.monticore.lang;

grammar AWSTM extends de.monticore.lang.DTStructure  {

  AWSTMCompilationUnit = StructureDefinitionCompilationUnit;

  scope symbol ComponentType implements ITypeDefinition = "componentType" Name ["singleton"]? ITypeExtension?  "{"
    (ITypeElement | IMethodDefinition | IPropertyDefinition)+
  "}";

  ComponentExtension implements ITypeExtension = "extendsFrom" Name;

  Tags implements ITypeElement = "tags" "{" (Tag | ",")+ "}";
  Tag = "[" StringLiteral "," StringLiteral "]";

  symbol PropertyDefinition implements IPropertyDefinition = "propertyDefinition" ["externallyStored"]? ["externalId"]?
    ["timeSeries"]? ["requiredEntity"]? Type Name ("=" defaultValue:Expression)?  Configuration? ";";
  Configuration = ("with" "configuration" "{" configurations:Tag* "}");

  symbol Function implements IMethodDefinition = "function" Name "implementedBy" QualifiedName ["requires"]?
      IMethodParameter* ";";

  FunctionParameter implements IMethodParameter = param:Name;

  symbol AWSDataType = "type" Name unit:StringLiteral "in" allowedValues:Tag (";" | "{" nested:AWSDataType "}") ;

  Relationship implements IAssociation = "relationship" type:StringLiteral? target:Name ";";



}