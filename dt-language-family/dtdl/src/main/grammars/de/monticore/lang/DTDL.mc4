package de.monticore.lang;

grammar DTDL extends de.monticore.literals.MCJavaLiterals, de.monticore.types.MCBasicTypes  {

  DTDLDefinition = InterfaceDefinition+;


  ////////////// DTMI //////////////
  interface DTMI;
  Version implements DTMI = "version" SignedInteger ";";
  Schema implements DTMI = "schema" MCType ";";
  Path implements DTMI = "path" MCQualifiedName ";";
  ID implements DTMI = "id" StringLiteral ";";

  ////////////// DTELement //////////////
  interface DTElement;
  DisplayName implements DTElement = "display" Name ";";
  Description implements DTElement = "description" StringLiteral ";";
  DTDLComment implements DTElement = "comment" StringLiteral ";";

  ////////////// Interface //////////////
  InterfaceDefinition = "interface" Name ("extends" (Name | ",")*)? "{"
    (DTMI | DTElement | DTDLContent)*
  "}";

  interface DTDLContent;

  Context implements DTDLContent = "context" StringLiteral ";";

  ////////////// Command //////////////
  Command implements DTDLContent = "command" Name "{" Request? Response? "}" ";";
  Request = "request" "{" paramName:Name "{" (DTMI | DTElement)+ "}" "}";
  Response = "response" "{" paramName:Name "{" (DTMI | DTElement)+ "}" "}";

  ////////////// Property //////////////
  Property implements DTDLContent = "property" ["writable"]? schema:MCType Name ";";

  ////////////// Telemetry //////////////
  Telemetry implements DTDLContent = "telemetry" schema:MCType Name ";";

  ////////////// Relationship //////////////
  Relationship implements DTDLContent = "relationship" ["writable"]? Name
                                        ("[" min:SignedInteger "," max:SignedInteger "]")? target:Name ";";

}
