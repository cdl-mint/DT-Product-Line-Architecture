// 2. Configuration wie Module aussehen und welche Extension sie realisieren mit welchen Ports

/////////// Extension DataDescription
extension DataDescription {
  software a.b.DataAccessInterface;
  language a.b.StructureLanguageInterface;
}

component DataAccessInterface {
  ports
    in  IStructure.Command command;
    out IStructure structure;
}

language component StructureLanguageInterface {
  grammar DTStructure;
  provides production IStructureDefinition;
  provides production IMethodDefinition;
  requires production IStructureDefinition;
  requires production IMethodDefinition; //....
}

////////// Module Azure
module AzureDataAccess implements DataDescription {
  software AzureDataExplorer {
    command -> f;
	i       -> structure;
  }
  
  language DTDL {
    InterfaceDefinition -> IStructureDefinition;
	FunctionDefinition  -> IMethodDefinition;
  }
}

component AzureDataExplorer {
  ports
    in Function f;
	out Interface i;
}

language component DTDL {
  grammar DTDLG;
  provides InterfaceDefinition;
  provides FunctionDefinition;

}


////////// Extension SBBehavior
extension SBBehavior {
  dependencies {
    DataDescription
  }

  language a.b.SBBLanguageInterface; //references SCOLAR component
  software a.b.SBBPlanner; //references MontiArc component
}

component SBBPlanner {
  ports
    in  IStructure s;
    out IStructure.Command command;
}

language component SBBLanguageInterface {
  grammar DTSBBehavior;
  requires production ISMDef;
  requires production IState;
  requires production ITransition;
  requires production ITypeDefinition;
   //....
}

////////Module TimedStatemachineBehavior
module TimedStatemachineBehavior implements SBBehavior {

  software component TSBPlanner {
    s -> Data;
	command -> Function;
  }
  
  language component a.b.TSB {
    TSBDefinition -> ISMDef;
	State         -> IState;
	TimedTransition -> ITransition;
  }
}

component TSBPlanner {
  ports
    in  Data;
    out Function;
}

language component SBBLanguageInterface {
  grammar TSB;
  provides production TSBDefinition;
  provides production State;
  provides production TimedTransition;
  requires production ITypeDefinition
   //....
}



// 1. Configuration wie stecken extensions ineinander auf Basis von Komponenten Interfaces
import DataDescription;
import SBBehavior;

architecture MAPEDTReference {
  software {
    component DataAccessInterface data;
    component TSBPlanner planner;

    connect data.structure -> planner.s;
    conncet planner.command -> data.f;
    }
  }

  language {
    StructureLanguageInterface.IStructureDefinition -> SBBLanguageInterface.ITypeDefinition;
  }
}


// Generate this
// 3. Definition der Produktlinlie
// DT product line
dt product line DTPL for architecture MAPEDTReference { // integrierte Software und Sprachfeatures
  architecture MAPEDTReference {
    extension SBB {
      module TimedStatemachineBehavior, //reference Module
    }
    extension DataAccess {
      module CD,
      module AzureDataAccess,
      module AWSTM
    }
  }
}

// 4. Auswahl des Produkts
dt configuration {
  TSB, AzureDataAccess;
}

// 5. Configuration des Produkts durch Modelle
// Haben wir hier ja schon irgendwo rumfliegen.